
#+TITLE: Emacs Desktop Environment
#+PROPERTY: header-args:emacs-lisp :tangle ./desktop.el :mkdirp yes


* Window Management 

** EXWM Configuration
#+begin_src emacs-lisp


  (defun efs/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun efs/set-wallpaper ()
    (interactive)
    ;; NOTE: You will need to update this to a valid background path!
    (start-process-shell-command
        "feh" nil  "feh --bg-scale /home/smarx/Pictures/wallpapers/street_light.jpg"))

  (defun efs/exwm-init-hook ()
    ;; Make workspace 1 be the one where we land at startup
    (exwm-workspace-switch-create 1)

    ;; Open eshell by default
    (eshell)

    ;; Show battery status in the mode line
    (display-battery-mode 1)

    ;; Show the time and date in modeline
    (setq display-time-day-and-date t)
    (display-time-mode 1)
    ;; Also take a look at display-time-format and format-time-string

    ;; Launch apps that will run in the background
    (efs/run-in-background "nm-applet")
    (efs/run-in-background "pasystray")
    (efs/run-in-background "dbus-launch blueman-applet"))



(defun efs/exwm-update-class ()
  (exwm-workspace-rename-buffer exwm-class-name))


(defun efs/exwm-update-title ()
  (pcase exwm-class-name
    ("Firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))))

;; This function isn't currently used, only serves as an example how to
;; position a window
(defun efs/position-window ()
  (let* ((pos (frame-position))
         (pos-x (car pos))
          (pos-y (cdr pos)))

    (exwm-floating-move (- pos-x) (- pos-y))))

(defun efs/configure-window-by-class ()
  (interactive)
  (pcase exwm-class-name
    ("Firefox" (exwm-workspace-move-window 2))
    ("Sol" (exwm-workspace-move-window 3))
    ("mpv" (exwm-floating-toggle-floating)
           (exwm-layout-toggle-mode-line))))

;; This function should be used only after configuring autorandr!
(defun efs/update-displays ()
  (efs/run-in-background "autorandr --change --force")
  (efs/set-wallpaper)
  (message "Display config: %s"
           (string-trim (shell-command-to-string "autorandr --current"))))

(use-package exwm
  :config
  ;; Set the default number of workspaces
  (setq exwm-workspace-number 5)

  ;; When window "class" updates, use it to set the buffer name
  (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

  ;; When window title updates, use it to set the buffer name
  (add-hook 'exwm-update-title-hook #'efs/exwm-update-title)

  ;; Configure windows as they're created
  (add-hook 'exwm-manage-finish-hook #'efs/configure-window-by-class)
  
  ;; When EXWM starts up, do some extra confifuration
  (add-hook 'exwm-init-hook #'efs/exwm-init-hook)

  (require 'exwm-randr)
  (exwm-randr-enable)
  (add-hook 'exwm-randr-screen-change-hook #'efs/update-displays)
  (efs/update-displays)
  ;;(start-process-shell-command "xrandr" nil "xrandr --output eDP1 --primary --mode 2560x1440 --pos 0x0 --rotate normal")
  
  ;; set the wallpaper
  (efs/set-wallpaper)
  
  ;; use a systemtray
  (require 'exwm-systemtray)
  (setq exwm-systemtray-height 32)
  (exwm-systemtray-enable)

  ;; Automatically send the mouse cursor to the selected workspace's display
  (setq exwm-workspace-warp-cursor t)

  ;; Window focus should follow the mouse pointer
  (setq mouse-autoselect-window t
        focus-follows-mouse t)
 
  ;; These keys should always pass through to Emacs
  (setq exwm-input-prefix-keys
    '(?\C-x
      ?\C-u
      ?\C-h
      ?\M-x
      ?\M-`
      ?\M-&
      ?\M-:
      ?\C-\M-j  ;; Buffer list
      ?\C-\ ))  ;; Ctrl+Space

  ;; Ctrl+Q will enable the next key to be sent directly
  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)


  ;; Set up global key bindings.  These always work, no matter the input state!
  ;; Keep in mind that changing this list after EXWM initializes has no effect.
  (setq exwm-input-global-keys
        `(
          ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
          ([?\s-r] . exwm-reset)

          ;; Move between windows
          ([s-left] . windmove-left)
          ([s-right] . windmove-right)
          ([s-up] . windmove-up)
          ([s-down] . windmove-down)
          
          ;; Launch applications via shell command
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))

          ;; Switch workspace
          ([?\s-w] . exwm-workspace-switch)

          ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))

  (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)

  (exwm-enable))

#+end_src

* Desktop Environment

** Desktop Key Bindings

We use the [[https://github.com/DamienCassou/desktop-environment][desktop-environment]] package to automatically bind to well-known programs for controlling the volume, screen brightness, media playback, and doing other things like locking the screen and taking screenshots.  Make sure that you install the necessary programs to make this functionality work!  Check the [[https://github.com/DamienCassou/desktop-environment#default-configuration][default programs]] list to know what you need to install.

#+begin_src emacs-lisp

  (use-package desktop-environment
    :after exwm
    :config (desktop-environment-mode)
    :custom
    (desktop-environment-brightness-small-increment "2%+")
    (desktop-environment-brightness-small-decrement "2%-")
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-"))

#+end_src

** Desktop File

This file is used by your "login manager" (GDM, LightDM, etc) to display EXWM as a desktop environment option when you log in.

*IMPORTANT*: Make sure you create a symbolic link for this file into =/usr/share/xsessions=:

#+begin_src sh :tangle no

sudo ln -f ~/.emacs.d/exwm/EXWM.desktop /usr/share/xsessions/EXWM.desktop

#+end_src

#+begin_src shell :tangle ./exwm/EXWM.desktop :mkdirp yes

  [Desktop Entry]
  Name=EXWM
  Comment=Emacs Window Manager
  Exec=sh /home/smarx/.emacs.d/exwm/start-exwm.sh
  TryExec=sh
  Type=Application
  X-LightDM-DesktopName=exwm
  DesktopNames=exwm

#+end_src

** Launcher Script

This launcher script is invoked by =EXWM.desktop= to start Emacs and load our desktop environment configuration.  We also start up some other helpful applications to configure the desktop experience

#+begin_src shell :tangle ./exwm/start-exwm.sh :mkdirp yes :shebang #!/bin/sh

  # Set the screen DPI (uncomment this if needed!)
  xrdb ~/.emacs.d/exwm/Xresources

  # Run the screen compositor
  compton &

  # Enable screen locking on suspend
  xss-lock -- slock &

  # Fire it up
  exec dbus-launch --exit-with-session emacs -mm --debug-init -l ~/.emacs.d/desktop.el

#+end_src

** Keyboard Configuration

The =Xmodmap= file will be used with the =xmodmap= program to remap CapsLock to Ctrl inside of our desktop environment:

#+begin_src sh :tangle ./exwm/Xmodmap

  clear lock
  clear control
  keycode 66 = Control_L
  add control = Control_L
  add Lock = Control_R

#+end_src

** DPI configuration

The =Xresources= file will be used with =xrdb= in =start-exwm.sh= to set our screen DPI:

#+begin_src conf :tangle ./exwm/Xresources

  Xft.dpi:   132   # Set this to your desired DPI!  Larger number means bigger text and UI

#+end_src
